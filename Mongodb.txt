
MongoDB:

MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.


Document Database:

A record in MongoDB is a document, which is a data structure composed of field and value pairs. MongoDB documents are similar to JSON objects. The values of fields may include other documents, arrays, and arrays of documents.


The advantages of using documents are:

Documents (i.e. objects) correspond to native data types in many programming languages.
Embedded documents and arrays reduce need for expensive joins.

Key Features:


High Performance


Rich Query Language


MongoDB supports a rich query language to support read and write operations (CRUD).


High Availability

         -> MongoDB’s replication facility, called replica set, provides:

         -> automatic failover and data redundancy.


to create database:

 use databasename

  ex: use testdb


  collection:


  To create a collection.

  syntax: db.createCollection(name, options)


  Name:  String  

  Options: Document


  options:

  capped  -   Boolean

               (Optional) If true, enables a capped collection. Capped collection is a fixed size collection that automatically overwrites its oldest entries when it reaches its maximum size. If you specify true, you need to specify size parameter also.

   size   -  number

               (Optional) Specifies a maximum size in bytes for a capped collection. If capped is true, then you need to specify this field also.
    
    max   -  number

               (Optional) Specifies the maximum number of documents allowed in the capped collection.



   example:

   db.createCollection("movies", { capped : true, size : 
   614, max : 100 })


insert:

syntax:  db.movies.insert(collection object);

{
	"text":"nothing"
}


insertOne:

db.movies.insertOne(collection object);

note: even though if we give multiple documents, it takes only one document.

insertMany:

syntax:  db.movies.insertMany(array of collections);

example: 

db.theatre.insertMany([{
   "name":"sandhya",
    "address":"RTC Xroad"	
},
{
   "name":"sruthi",
    "address":"RTC Xroad"	
},
{
   "name":"ramya",
    "address":"RTC Xroad"	
}]);

Differences between insert and insertMany:

db.collection.insert() : inserts a document or documents into a collection and returns a WriteResult object for single inserts and a BulkWriteResult object for bulk inserts.
> var d = db.collection.insert({"b": 3})
> d
WriteResult({ "nInserted" : 1 })
> var d2 = db.collection.insert([{"b": 3}, {'c': 4}])
> d2
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})


db.collection.insertOne() : inserts a document into a collection and returns a document which look like this:
> var document = db.collection.insertOne({"a": 3})
> document
{
        "acknowledged" : true,
        "insertedId" : ObjectId("571a218011a82a1d94c02333")
}
db.collection.insertMany(): inserts multiple documents into a collection and returns a document that looks like this:
> var res = db.collection.insertMany([{"b": 3}, {'c': 4}])
> res
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("571a22a911a82a1d94c02337"),
                ObjectId("571a22a911a82a1d94c02338")
        ]
}

The insert() method is deprecated ,so you should use the the .insertOne() method whenever you want to insert a single document into your collection and the .insertMany() when you want to insert multiple documents into your collection.


Summary:


MongoDB provides the following methods for inserting documents into a collection:

db.collection.insertOne()	Inserts a single document into a collection.
db.collection.insertMany()	db.collection.insertMany() inserts multiple documents into a collection.
db.collection.insert()	db.collection.insert() inserts a single document or multiple documents into a collection.


Additional Methods for Inserts

The following methods can also add new documents to a collection:

db.collection.update() when used with the upsert: true option.
db.collection.updateOne() when used with the upsert: true option.
db.collection.updateMany() when used with the upsert: true option.
db.collection.findAndModify() when used with the upsert: true option.
db.collection.findOneAndUpdate() when used with the upsert: true option.
db.collection.findOneAndReplace() when used with the upsert: true option.
db.collection.save().
db.collection.bulkWrite().

Querying documents:
-------------------

syntax: db.collection.find({}); - for all documents

syntax: db.collection.find({"name":"raj"});- for specific documents.

Query Operators:

syntax:  db.collection.find({name:{$in:['sandhya','sruthi']}});


And Condition:

> db.theatre.find({name:'sandhya',address:'RTC Xroad'});

note: comma(,) becomes the and operator.


Specify OR Conditions:

db.theatre.find({$or:[{name:'sruth'},{'address':'RTC Xroad'}]})


Specify AND as well as OR Conditions:

 db.theatre.find({name:'sruthi',$or:[{name:'sruth'},{'address':'RTC Xroad'}]});

 Query on Nested Field:

db.data.insertMany([{employee:{'name':'sai',age:22}},{employee:{'name':'ravi',age:40}}]);

db.data.find({"employee.name":"sai"});

 db.data.find({"employee.age":{$gt:30}});


Querying an array:
--------------------

db.inventory.insertMany([
   { item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
   { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
   { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
   { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
   { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }
]);

db.inventory.find( { tags: ["red", "blank"] } );

db.inventory.find( { tags: ["blue"] } );


------------------------------------------------------------

Dropping a database:

-> go to that database ,

   *  use databasename

       db.dropDatabase();

dropping a collection:

  * use databasename

      db.collection.drop()

-------------------------------------------------

Updating the document:

syntax:

       db.collection.update(condition);

db.users.update({'firstName':'sai kumar'},{$set:{'firstName':'Sai'}});


upsert:

db.users.update({'firstName':'sai kumar'},{$set:{'firstName':'Sai'}},{upsert:true});
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 1,
        "nModified" : 0,
        "_id" : ObjectId("59b2d81b3581918c5dacbfa5")
})

 db.users.update({'firstName':'Sai'},{$set:{'firstName':'Sai Kumar'}},{multi:true});
WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 3 })


save:

"_id" : ObjectId("59b2d81b3581918c5dacbfa5")

 db.users.save({"_id" : ObjectId("59b2d81b3581918c5dacbfa5"),"name":'sai kumar', address:'hyderabad'});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 });

remove:


db.collection.remove({});

db.users.remove({'name':'ravi'});

db.users.remove();(invalid command).

scenario 1:


db.users.save({"_id" : 5,"name":'ravi', address:'hyderabad'});
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 5 })
> db.users.save({"_id" : 6,"name":'ravi', address:'hyderabad'});
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 6 })
> db.users.save({"_id" : 7,"name":'ravi', address:'hyderabad'});
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 7 })
> db.users.save({"_id" : 8,"name":'ravi', address:'hyderabad'});
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 8 })
> db.users.remove({'name':'ravi'});
WriteResult({ "nRemoved" : 4 })

If we want to delete only one document,

db.users.remove({'name':'ravi'},1);

Projection:

-> projection means selecting only the necessary data rather than selecting whole of the data of a document. If a document has 5 fields and you need to show only 3, then select only 3 fields from them.


->  In MongoDB, when you execute find() method, then it displays all fields of a document. To limit this, you need to set a list of fields with value 1 or 0. 1 is used to show the field while 0 is used to hide the fields.

1-> show

0 -> skip

db.users.find({},{"_id":1}).pretty();

db.users.find({},{"_id":0}).pretty();


Limiting the records:


> db.users.find().pretty().limit(1);


skipping the records:

 db.users.find().pretty().limit(2).skip(1);

db.users.find().pretty().skip(1).limit(4);

default value in skip() method is 0

Sorting the documents:

To sort documents in MongoDB, you need to use sort() method. The method accepts a document containing a list of fields along with their sorting order. To specify sorting order 1 and -1 are used. 1 is used for ascending order while -1 is used for descending order.


Syntax:  db.COLLECTION_NAME.find().sort({KEY:1})

db.users.find().pretty().sort({'_id':1});// ascending order

db.users.find().pretty().sort({'_id':-1});// descending order


Aggregation:

syntax:

db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)


[{
   title: 'MongoDB Overview', 
   description: 'MongoDB is no sql database',
   by_user: 'Sai Kumar',
   url: 'http://www.java.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 100
},
{
   
   title: 'NoSQL Overview', 
   description: 'No sql database is very fast',
   by_user: 'Sai Kumar',
   url: 'http://www.java.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 10
},
{
   
   title: 'Neo4j Overview', 
   description: 'Neo4j is no sql database',
   by_user: 'Neo4j',
   url: 'http://www.neo4j.com',
   tags: ['neo4j', 'database', 'NoSQL'],
   likes: 750}]



db.courses.aggregate([{$group: {_id: "$by_user",num_tutorial : {$sum : 1}}}]);



$sum	Sums up the defined value from all documents in the collection.	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : "$likes"}}}])

$avg	Calculates the average of all given values from all documents in the collection.
	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$avg : "$likes"}}}])

$min	Gets the minimum of the corresponding values from all documents in the collection.	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$min : "$likes"}}}])

$max	Gets the maximum of the corresponding values from all documents in the collection.	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$max : "$likes"}}}])

$push	Inserts the value to an array in the resulting document.	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}])

$addToSet	Inserts the value to an array in the resulting document but does not create duplicates.	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}])

$first	Gets the first document from the source documents according to the grouping. Typically this makes only sense together with some previously applied “$sort”-stage.	db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}])

$last	Gets the last document from the source documents according to the grouping. Typically this makes only sense together with some previously applied “$sort”-stage.	db.mycol.aggregate([{$group : {_id : "$by_user", last_url : {$last : "$url"}}}])


MongoDB Relationships:

Relationships in MongoDB represent how various documents are logically related to each other. Relationships can be modeled via Embedded and Referenced approaches. Such relationships can be either 1:1, 1:N, N:1 or N:N.



Embedded Relationships:


{
   "contact": "98765",
   "dob": "01-01-1991",
   "name": "Raj Kumar",
   "address": [
      {
         "building": "22 A, Amberpet",
         "pincode": 123456,
         "city": "Hyderabad",
         "state": "India"
      },
      {
         "building": "170 A, Secunderabad",
         "pincode": 456789,
         "city": "Secunderabad",
         "state": "india"
      }
   ]
} 


accesing it:


db.user.find({},{address:{$slice:1}}).pretty();



Referenced Relationships:


[{
   name: "O'Reilly Media",
   founded: 1980,
   location: "CA",
   books: [123456789, 234567890,]
}

{
    _id: 123456789,
    title: "MongoDB: The Definitive Guide",
    author: [ "Kristina Chodorow", "Mike Dirolf" ],
    published_date: ISODate("2010-09-24"),
    pages: 216,
    language: "English"
}

{
   _id: 234567890,
   title: "50 Tips and Tricks for MongoDB Developer",
   author: "Kristina Chodorow",
   published_date: ISODate("2011-05-06"),
   pages: 68,
   language: "English"
}]





































































































	





